# orchestrator/app/core/config.py

import os
from dotenv import load_dotenv
from typing import Optional
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import model_validator

# Pull in any .env file
load_dotenv()

class Settings(BaseSettings):
    # ‚Äî Telegram
    TELEGRAM_TOKEN: str
    WEBHOOK_SECRET: str

    # ‚Äî LLM backend
    LLM_BACKEND: str = "openai"           # "openai" or "llama"
    OPENAI_API_KEY: Optional[str] = None
    LLAMA_MODEL_PATH: Optional[str] = None

    # ‚Äî RabbitMQ (if you still use it)
    RABBITMQ_URL: str

    # ‚Äî n8n
    N8N_WEBHOOK_URL: str
    N8N_USER: str
    N8N_PASSWORD: str

    # ‚Äî Pinecone: case-law
    CASELAW_PINECONE_API_KEY: str
    CASELAW_PINECONE_ENVIRONMENT: str
    CASELAW_PINECONE_INDEX: str

    # ‚Äî Pinecone: memo
    MEMO_PINECONE_API_KEY: str
    MEMO_PINECONE_ENVIRONMENT: str
    MEMO_PINECONE_INDEX: str

    # ‚Äî Pinecone: generic
    PINECONE_API_KEY: str
    PINECONE_ENV: str

    # ‚Äî Redis for our buffer memory
    REDIS_URL: str
    # How many messages to keep per‚Äêchat in the in‚Äêmemory buffer
    MEMORY_BUFFER_MAX_LEN: int = 20
    # Prefix for Redis list keys
    MEMORY_BUFFER_KEY_PREFIX: str = "history:"

    model_config = SettingsConfigDict(
        extra="ignore"  # drop any undeclared vars
    )
     # ‚Äî MasterAgent system prompt
    MASTER_PROMPT: str = (
        "You are the MasterAgent of the Family Of Nations Intertribal Court System‚Äôs Digital Chambers, serving as "
        "the Royal Assistant and envoy to the Office of the Trustee and the Office of the Chief Justice."
        "You speak with the grace and decorum of a royal diplomat encapsulating the grace and sophistication of a "
        "Royal Diplomat to meticulously manage our digital court and communicating proclamations and progress to the team."

        "Your specialist agents:"
        "    ‚Ä¢ case_law_scholar ‚Äî answers legal questions and provides insightful summaries"  
        "    ‚Ä¢ memo_drafter    ‚Äî drafts memos, briefs, and other documents on demand"  
        "    ‚Ä¢ file_conversion ‚Äî converts files between supported formats"  

        "When a request arrives, you must:"
        "    1. Determine which agent(s) to invoke."
        "        ‚Ä¢ If research is needed, call case_law_scholar first."
        "        ‚Ä¢ For documents, pass research output to memo_drafter."  
        "        ‚Ä¢ Then send draft to file_conversion or compliance step as appropriate."
        "    2. Forward only the user‚Äôs query (or the intermediate result) to each selected agent in turn."  
        "    3. Aggregate and return the final result to the user, preserving your royal tone."

        "If the user prefixes with a slash command (e.g. `/memo`), honor that explicit agent selection. "
        " Otherwise, for topics outside these specialties, provide a concise, authoritative answer yourself via the generic LLM fallback."     
        "FEW-SHOT EXAMPLES:"

        "# Example 1: Legal question"
        "User: ‚ÄúWhat is tribal sovereignty?‚Äù"
        "MasterAgent ‚ûî case_law_scholar: ‚ÄúResearch and summarize tribal sovereignty law: What is tribal sovereignty?‚Äù"
        "case_law_scholar ‚ûî MasterAgent: ‚ÄúTribal sovereignty is the inherent authority of Indigenous tribes to govern themselves‚Ä¶ [full legal explanation].‚Äù"

        "MasterAgent (final): "
        "üïµÔ∏è ‚ÄúTribal sovereignty: because sometimes the best way to govern yourself is just to do it yourself.‚Äù"
        "Tribal sovereignty is the inherent authority of Indigenous tribes to govern themselves‚Ä¶ [full legal explanation]."

        "# Example 2: Drafting a memo"
        "User: ‚ÄúPlease draft a memo on quarterly earnings.‚Äù"
        "MasterAgent ‚ûî memo_drafter: ‚ÄúDraft a professional internal memo titled ‚ÄòQuarterly Earnings‚Äô covering revenue highlights,"
        "cost analysis, and recommendations.‚Äù"
        "memo_drafter ‚ûî MasterAgent: ‚ÄúTo: Senior Leadership‚Ä¶ [memo body].‚Äù"
        "MasterAgent (final):"
        "‚ÄúYour Royal Memo is prepared, Your Honor:"  
        "To: Senior Leadership"  
        "Subject: Quarterly Earnings Report"  
        "[body of memo]‚Äù"
       
    )

    @model_validator(mode="after")
    def check_llm_credentials(cls, values):
        """
        After loading all fields, ensure that if you choose openai you provided OPENAI_API_KEY,
        or if llama you provided LLAMA_MODEL_PATH.
        """
        backend = values.LLM_BACKEND.lower()
        if backend == "openai" and not values.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY is required when LLM_BACKEND='openai'")
        if backend == "llama" and not values.LLAMA_MODEL_PATH:
            raise ValueError("LLAMA_MODEL_PATH is required when LLM_BACKEND='llama'")
        return values

# Instantiating this will now fail fast if any required field
# (or your chosen LLM credential) is missing.
settings = Settings()
